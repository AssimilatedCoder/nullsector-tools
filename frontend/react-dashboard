#!/bin/bash

# NullSector React Dashboard Management Script

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BUILD_DIR="$SCRIPT_DIR/NullSector-dashboard/build"

case "$1" in
    start)
        echo "üöÄ Starting NullSector React Dashboard..."
        
        # Detect OS
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            IS_UBUNTU=true
        else
            IS_UBUNTU=false
        fi
        
        # Check if React app exists
        if [ ! -d "$SCRIPT_DIR/NullSector-dashboard" ]; then
            echo "‚ùå React app directory not found. Run setup first:"
            echo "   ./setup-react-dashboard.sh"
            exit 1
        fi
        
        # Build if needed
        if [ ! -d "$BUILD_DIR" ]; then
            echo "üì¶ Building React app..."
            cd "$SCRIPT_DIR/NullSector-dashboard"
            
            # Install dependencies if needed
            if [ ! -d "node_modules" ]; then
                echo "üì¶ Installing dependencies..."
                npm install
            fi
            
            npm run build
            if [ $? -ne 0 ]; then
                echo "‚ùå Build failed. Check Node.js installation:"
                echo "   node --version && npm --version"
                exit 1
            fi
            
            # Copy synthetic data and data loader to build directory
            echo "üìä Copying synthetic data..."
            if [ -d "$SCRIPT_DIR/superpod_sev1_fake_telemetry" ]; then
                cp -r "$SCRIPT_DIR/superpod_sev1_fake_telemetry" "$BUILD_DIR/"
            fi
            if [ -f "$SCRIPT_DIR/dashboard-data-loader.js" ]; then
                cp "$SCRIPT_DIR/dashboard-data-loader.js" "$BUILD_DIR/"
            fi
        fi
        
        # Stop existing nginx
        if [ "$IS_UBUNTU" = true ]; then
            sudo systemctl stop nginx 2>/dev/null || true
        else
            sudo nginx -s stop 2>/dev/null || true
        fi
        sudo pkill nginx 2>/dev/null || true
        
        # Create nginx config with correct paths
        cat > /tmp/nginx-NullSector-dashboard.conf << EOF
server {
    listen 7777;
    listen [::]:7777;
    
    server_name _;
    root $BUILD_DIR;
    index index.html;
    
    # Enable CORS for all requests
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
    add_header Access-Control-Allow-Headers "Content-Type";
    
    # Serve the React app
    location / {
        try_files \$uri \$uri/ /index.html;
    }
    
    # Serve static files with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin *;
    }
    
    # Handle CSV and log files from the telemetry data
    location /superpod_sev1_fake_telemetry/ {
        add_header Access-Control-Allow-Origin *;
        add_header Content-Type "text/plain";
    }
    
    # Handle the dashboard data loader
    location /dashboard-data-loader.js {
        add_header Access-Control-Allow-Origin *;
        add_header Content-Type "application/javascript";
    }
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
}
EOF
        
        # Install nginx config
        if [ "$IS_UBUNTU" = true ]; then
            sudo cp /tmp/nginx-NullSector-dashboard.conf /etc/nginx/sites-available/NullSector-dashboard
            sudo ln -sf /etc/nginx/sites-available/NullSector-dashboard /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
        else
            sudo mkdir -p /usr/local/etc/nginx/servers
            sudo cp /tmp/nginx-NullSector-dashboard.conf /usr/local/etc/nginx/servers/NullSector-dashboard.conf
        fi
        
        # Fix permissions
        if [ "$IS_UBUNTU" = true ]; then
            chmod 755 "$HOME" 2>/dev/null || true
            chmod 755 "$HOME/Projects" 2>/dev/null || true
            chmod 755 "$SCRIPT_DIR"
            chmod 755 "$SCRIPT_DIR/NullSector-dashboard"
            chmod -R 755 "$BUILD_DIR"
        else
            chmod -R 755 "$BUILD_DIR"
        fi
        
        # Test and start nginx
        sudo nginx -t
        if [ $? -ne 0 ]; then
            echo "‚ùå nginx configuration test failed"
            exit 1
        fi
        
        if [ "$IS_UBUNTU" = true ]; then
            sudo systemctl start nginx
        else
            sudo nginx
        fi
        
        # Check if nginx started
        sleep 2
        if pgrep nginx > /dev/null; then
            if [ "$IS_UBUNTU" = true ]; then
                LOCAL_IP=$(ip route get 1.1.1.1 | grep -oP 'src \K\S+' 2>/dev/null || hostname -I | awk '{print $1}')
            else
                LOCAL_IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -1)
            fi
            echo "‚úÖ Dashboard running at http://localhost:7777"
            [ ! -z "$LOCAL_IP" ] && echo "üåê Network: http://$LOCAL_IP:7777"
        else
            echo "‚ùå Failed to start nginx"
            echo "üìã Check logs: sudo tail -20 /var/log/nginx/error.log"
        fi
        
        # Clean up
        rm -f /tmp/nginx-NullSector-dashboard.conf
        ;;
    
    stop)
        echo "üõë Stopping NullSector React Dashboard..."
        sudo nginx -s stop 2>/dev/null || sudo pkill nginx 2>/dev/null || true
        echo "‚úÖ Dashboard stopped"
        ;;
    
    restart)
        echo "üîÑ Restarting NullSector React Dashboard..."
        $0 stop
        sleep 2
        $0 start
        ;;
    
    build)
        echo "üì¶ Building React app..."
        cd "$SCRIPT_DIR/NullSector-dashboard"
        
        # Install dependencies if needed
        if [ ! -d "node_modules" ]; then
            echo "üì¶ Installing dependencies..."
            npm install
        fi
        
        npm run build
        if [ $? -ne 0 ]; then
            echo "‚ùå Build failed"
            exit 1
        fi
        
        # Copy synthetic data and data loader to build directory
        echo "üìä Copying synthetic data..."
        if [ -d "$SCRIPT_DIR/superpod_sev1_fake_telemetry" ]; then
            cp -r "$SCRIPT_DIR/superpod_sev1_fake_telemetry" "$BUILD_DIR/"
            echo "‚úÖ Copied telemetry data"
        fi
        if [ -f "$SCRIPT_DIR/dashboard-data-loader.js" ]; then
            cp "$SCRIPT_DIR/dashboard-data-loader.js" "$BUILD_DIR/"
            echo "‚úÖ Copied data loader"
        fi
        
        echo "‚úÖ Build complete"
        ;;
    
    status)
        if pgrep nginx > /dev/null; then
            LOCAL_IP=$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -1)
            echo "‚úÖ Dashboard is running"
            echo "üåê Local: http://localhost:7777"
            [ ! -z "$LOCAL_IP" ] && echo "üåê Network: http://$LOCAL_IP:7777"
        else
            echo "‚ùå Dashboard is not running"
        fi
        ;;
    
    logs)
        echo "üìã nginx logs:"
        sudo tail -f /usr/local/var/log/nginx/error.log 2>/dev/null || \
        sudo tail -f /var/log/nginx/error.log 2>/dev/null || \
        echo "‚ùå Could not find nginx logs"
        ;;
    
    test)
        echo "üß™ Testing dashboard accessibility..."
        
        # Test main page
        if curl -s http://localhost:7777 > /dev/null; then
            echo "‚úÖ Main page accessible"
        else
            echo "‚ùå Main page not accessible"
        fi
        
        # Test telemetry data
        if curl -s http://localhost:7777/superpod_sev1_fake_telemetry/gpu_utilization.csv | head -1 > /dev/null; then
            echo "‚úÖ Telemetry data accessible"
        else
            echo "‚ùå Telemetry data not accessible"
        fi
        
        # Test data loader
        if curl -s http://localhost:7777/dashboard-data-loader.js > /dev/null; then
            echo "‚úÖ Dashboard data loader accessible"
        else
            echo "‚ùå Dashboard data loader not accessible"
        fi
        ;;
    
    *)
        echo "NullSector React Dashboard Control Script"
        echo ""
        echo "Usage: $0 {start|stop|restart|build|status|logs|test}"
        echo ""
        echo "Commands:"
        echo "  start    - Build (if needed) and start the dashboard"
        echo "  stop     - Stop the dashboard"
        echo "  restart  - Restart the dashboard"
        echo "  build    - Build the React app"
        echo "  status   - Check dashboard status"
        echo "  logs     - Show nginx logs"
        echo "  test     - Test dashboard accessibility"
        echo ""
        echo "Examples:"
        echo "  $0 start           # Start the dashboard"
        echo "  $0 status          # Check if running"
        echo "  $0 test            # Test all endpoints"
        echo ""
        exit 1
        ;;
esac
