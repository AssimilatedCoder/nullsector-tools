#!/bin/bash

# Management script for Sesterce Secure Dashboard

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REACT_DIR="$SCRIPT_DIR/sesterce-dashboard"
BUILD_DIR="$REACT_DIR/build"
API_PID_FILE="$SCRIPT_DIR/.api.pid"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if we're on Ubuntu or macOS
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    IS_UBUNTU=true
elif [[ "$OSTYPE" == "darwin"* ]]; then
    IS_UBUNTU=false
else
    echo -e "${RED}‚ùå Unsupported operating system: $OSTYPE${NC}"
    exit 1
fi

# Function to check if API is running
check_api_status() {
    if [ "$IS_UBUNTU" = true ]; then
        if systemctl is-active --quiet sesterce-calculator-api; then
            return 0
        else
            return 1
        fi
    else
        if [ -f "$API_PID_FILE" ]; then
            local pid=$(cat "$API_PID_FILE")
            if ps -p "$pid" > /dev/null 2>&1; then
                return 0
            fi
        fi
        return 1
    fi
}

# Function to start services
start_services() {
    echo -e "${GREEN}üöÄ Starting Sesterce Secure Dashboard...${NC}"
    
    # Start API
    echo "Starting API service..."
    if [ "$IS_UBUNTU" = true ]; then
        sudo systemctl start sesterce-calculator-api
        sleep 2
        if systemctl is-active --quiet sesterce-calculator-api; then
            echo -e "${GREEN}‚úÖ API service started${NC}"
        else
            echo -e "${RED}‚ùå Failed to start API service${NC}"
            sudo systemctl status sesterce-calculator-api
            exit 1
        fi
    else
        # Check if virtual environment exists
        if [ ! -d "$SCRIPT_DIR/venv" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Virtual environment not found. Run setup-secure-dashboard.sh first${NC}"
            exit 1
        fi
        
        # Start API in background
        cd "$SCRIPT_DIR"
        source venv/bin/activate
        nohup gunicorn -w 4 -b 127.0.0.1:7778 calculator-api:app > api.log 2>&1 &
        echo $! > "$API_PID_FILE"
        sleep 2
        
        if check_api_status; then
            echo -e "${GREEN}‚úÖ API service started (PID: $(cat $API_PID_FILE))${NC}"
        else
            echo -e "${RED}‚ùå Failed to start API service${NC}"
            [ -f api.log ] && tail -20 api.log
            exit 1
        fi
    fi
    
    # Check Nginx
    if pgrep -x "nginx" > /dev/null; then
        echo -e "${GREEN}‚úÖ Nginx is running${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Nginx is not running. Starting...${NC}"
        if [ "$IS_UBUNTU" = true ]; then
            sudo systemctl start nginx
        else
            sudo nginx
        fi
    fi
    
    echo -e "${GREEN}‚úÖ All services started${NC}"
    echo ""
    echo "üåê Access the secure dashboard at: http://localhost:7777"
}

# Function to stop services
stop_services() {
    echo -e "${YELLOW}üõë Stopping Sesterce Secure Dashboard...${NC}"
    
    # Stop API
    if [ "$IS_UBUNTU" = true ]; then
        sudo systemctl stop sesterce-calculator-api
        echo -e "${GREEN}‚úÖ API service stopped${NC}"
    else
        if [ -f "$API_PID_FILE" ]; then
            local pid=$(cat "$API_PID_FILE")
            if ps -p "$pid" > /dev/null 2>&1; then
                kill "$pid"
                rm -f "$API_PID_FILE"
                echo -e "${GREEN}‚úÖ API service stopped${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  API service not running${NC}"
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  API service not running${NC}"
        fi
    fi
}

# Function to show status
show_status() {
    echo -e "${GREEN}üìä Sesterce Secure Dashboard Status${NC}"
    echo ""
    
    # API Status
    echo -n "API Service: "
    if check_api_status; then
        echo -e "${GREEN}‚úÖ Running${NC}"
        if [ "$IS_UBUNTU" = true ]; then
            sudo systemctl status sesterce-calculator-api --no-pager | head -10
        else
            echo "   PID: $(cat $API_PID_FILE 2>/dev/null || echo 'unknown')"
        fi
    else
        echo -e "${RED}‚ùå Not running${NC}"
    fi
    
    echo ""
    
    # Nginx Status
    echo -n "Nginx: "
    if pgrep -x "nginx" > /dev/null; then
        echo -e "${GREEN}‚úÖ Running${NC}"
    else
        echo -e "${RED}‚ùå Not running${NC}"
    fi
    
    echo ""
    
    # Check if API is responding
    echo -n "API Health: "
    if curl -s http://localhost:7778/api/health > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Healthy${NC}"
    else
        echo -e "${RED}‚ùå Not responding${NC}"
    fi
}

# Function to view logs
view_logs() {
    echo -e "${GREEN}üìã Viewing logs...${NC}"
    
    if [ "$IS_UBUNTU" = true ]; then
        echo "=== API Logs ==="
        sudo journalctl -u sesterce-calculator-api -n 50 --no-pager
        echo ""
        echo "=== Nginx Access Logs ==="
        sudo tail -20 /var/log/nginx/sesterce-secure-access.log 2>/dev/null || echo "No access logs yet"
        echo ""
        echo "=== Nginx Error Logs ==="
        sudo tail -20 /var/log/nginx/sesterce-secure-error.log 2>/dev/null || echo "No error logs yet"
    else
        echo "=== API Logs ==="
        [ -f "$SCRIPT_DIR/api.log" ] && tail -50 "$SCRIPT_DIR/api.log" || echo "No API logs yet"
        echo ""
        echo "=== Nginx Logs ==="
        tail -20 /usr/local/var/log/nginx/sesterce-secure-*.log 2>/dev/null || echo "No Nginx logs yet"
    fi
}

# Function to rebuild the app
rebuild_app() {
    echo -e "${GREEN}üèóÔ∏è  Rebuilding React app...${NC}"
    
    cd "$REACT_DIR"
    npm run build
    
    # Copy additional assets
    cp -r "$SCRIPT_DIR/superpod_sev1_fake_telemetry" "$BUILD_DIR/" 2>/dev/null || true
    cp "$SCRIPT_DIR/sev1-warroom-dashboard.html" "$BUILD_DIR/" 2>/dev/null || true
    cp "$SCRIPT_DIR/dashboard-data-loader.js" "$BUILD_DIR/" 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ React app rebuilt${NC}"
}

# Function to test API
test_api() {
    echo -e "${GREEN}üß™ Testing API...${NC}"
    
    # Check health endpoint
    echo -n "Health check: "
    if curl -s http://localhost:7778/api/health | grep -q "healthy"; then
        echo -e "${GREEN}‚úÖ Passed${NC}"
    else
        echo -e "${RED}‚ùå Failed${NC}"
        exit 1
    fi
    
    # Test calculation endpoint
    echo -n "Calculation test: "
    
    # Generate test signature (simplified for testing)
    local test_data='{"gpuModel":"h100-sxm","numGPUs":1000,"signature":"test"}'
    
    local response=$(curl -s -X POST http://localhost:7778/api/calculate \
        -H "Content-Type: application/json" \
        -d "$test_data" 2>/dev/null)
    
    if echo "$response" | grep -q "error"; then
        echo -e "${YELLOW}‚ö†Ô∏è  API returned error (expected for test signature)${NC}"
    else
        echo -e "${GREEN}‚úÖ API is responding${NC}"
    fi
}

# Main command handler
case "$1" in
    start)
        start_services
        ;;
    stop)
        stop_services
        ;;
    restart)
        stop_services
        sleep 2
        start_services
        ;;
    status)
        show_status
        ;;
    logs)
        view_logs
        ;;
    build)
        rebuild_app
        ;;
    test)
        test_api
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status|logs|build|test}"
        echo ""
        echo "Commands:"
        echo "  start    - Start all services"
        echo "  stop     - Stop all services"
        echo "  restart  - Restart all services"
        echo "  status   - Show service status"
        echo "  logs     - View recent logs"
        echo "  build    - Rebuild React app"
        echo "  test     - Test API endpoints"
        exit 1
        ;;
esac
