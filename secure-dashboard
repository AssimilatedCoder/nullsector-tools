#!/bin/bash

# Secure Sesterce Dashboard Management Script
# Now with backend API security

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REACT_DIR="$SCRIPT_DIR/sesterce-dashboard"
BUILD_DIR="$REACT_DIR/build"
NGINX_CONF="$SCRIPT_DIR/nginx-sesterce-dashboard.conf"
API_PID_FILE="$SCRIPT_DIR/api.pid"

# Load environment variables
if [ -f "$SCRIPT_DIR/.env" ]; then
    export $(cat "$SCRIPT_DIR/.env" | xargs)
fi

start_api() {
    echo "🚀 Starting secure API server..."
    cd "$SCRIPT_DIR"
    
    if [ -f "$API_PID_FILE" ]; then
        if kill -0 $(cat "$API_PID_FILE") 2>/dev/null; then
            echo "API server already running (PID: $(cat $API_PID_FILE))"
            return 0
        else
            rm -f "$API_PID_FILE"
        fi
    fi
    
    # Start API server in background (using virtual environment)
    source "$SCRIPT_DIR/venv/bin/activate" && python calculator-api.py &
    API_PID=$!
    echo $API_PID > "$API_PID_FILE"
    
    # Wait a moment and check if it started successfully
    sleep 2
    if kill -0 $API_PID 2>/dev/null; then
        echo "✅ Secure API server started (PID: $API_PID)"
        echo "🔒 API running on http://localhost:7778"
    else
        echo "❌ Failed to start API server"
        rm -f "$API_PID_FILE"
        return 1
    fi
}

stop_api() {
    echo "🛑 Stopping API server..."
    if [ -f "$API_PID_FILE" ]; then
        PID=$(cat "$API_PID_FILE")
        if kill -0 $PID 2>/dev/null; then
            kill $PID
            rm -f "$API_PID_FILE"
            echo "✅ API server stopped"
        else
            echo "API server not running"
            rm -f "$API_PID_FILE"
        fi
    else
        echo "API server not running"
    fi
}

start_services() {
    echo "🚀 Starting secure Sesterce dashboard services..."
    
    # Start API first
    start_api
    
    # Start Nginx
    if command -v nginx >/dev/null 2>&1; then
        if ! pgrep nginx > /dev/null; then
            sudo nginx -c "$NGINX_CONF"
            echo "✅ Nginx started with secure configuration"
        else
            sudo nginx -s reload -c "$NGINX_CONF"
            echo "✅ Nginx reloaded with secure configuration"
        fi
    else
        echo "❌ Nginx not found. Please install nginx."
        return 1
    fi
    
    echo ""
    echo "🎉 Secure Sesterce Dashboard is now running!"
    echo "🌐 Access: http://localhost:3025"
    echo "🔒 API: http://localhost:7778"
    echo "🛡️  Security: JWT Authentication + Server-side calculations"
    echo ""
    echo "📊 Login with your credentials:"
    echo "   • Youssef / Sesterce2025_SECURE_v2"
    echo "   • Maciej / PathFinder2025_SECURE_v2" 
    echo "   • admin / Arno7747_SECURE_v2"
    echo ""
    echo "🔐 All passwords are now hashed and secure!"
}

stop_services() {
    echo "🛑 Stopping secure dashboard services..."
    
    stop_api
    
    if pgrep nginx > /dev/null; then
        sudo nginx -s quit
        echo "✅ Nginx stopped"
    fi
    
    echo "✅ All services stopped"
}

case "$1" in
    start)
        start_services
        ;;
    stop)
        stop_services
        ;;
    restart)
        stop_services
        sleep 2
        start_services
        ;;
    api-start)
        start_api
        ;;
    api-stop)
        stop_api
        ;;
    status)
        echo "📊 Service Status:"
        if [ -f "$API_PID_FILE" ] && kill -0 $(cat "$API_PID_FILE") 2>/dev/null; then
            echo "🟢 API Server: Running (PID: $(cat $API_PID_FILE))"
        else
            echo "🔴 API Server: Stopped"
        fi
        
        if pgrep nginx > /dev/null; then
            echo "🟢 Nginx: Running"
        else
            echo "🔴 Nginx: Stopped"
        fi
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|api-start|api-stop|status}"
        echo ""
        echo "🔒 Secure Sesterce Dashboard Management"
        echo "   start     - Start both API and Nginx"
        echo "   stop      - Stop both services"
        echo "   restart   - Restart both services"
        echo "   api-start - Start only the API server"
        echo "   api-stop  - Stop only the API server"
        echo "   status    - Show service status"
        exit 1
        ;;
esac
