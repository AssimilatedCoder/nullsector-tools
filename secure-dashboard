#!/bin/bash

# Secure NullSector Dashboard Management Script
# Now with backend API security

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REACT_DIR="$SCRIPT_DIR/NullSector-dashboard"
BUILD_DIR="$REACT_DIR/build"
NGINX_CONF="$SCRIPT_DIR/nginx-NullSector-dashboard.conf"
API_PID_FILE="$SCRIPT_DIR/api.pid"

# Load environment variables (skip comments and empty lines)
if [ -f "$SCRIPT_DIR/.env" ]; then
    set -a
    source <(grep -v '^#' "$SCRIPT_DIR/.env" | grep -v '^$')
    set +a
fi

start_api() {
    echo "🚀 Starting secure API server..."
    cd "$SCRIPT_DIR"
    
    if [ -f "$API_PID_FILE" ]; then
        if kill -0 $(cat "$API_PID_FILE") 2>/dev/null; then
            echo "API server already running (PID: $(cat $API_PID_FILE))"
            return 0
        else
            rm -f "$API_PID_FILE"
        fi
    fi
    
    # Start API server in background (using virtual environment)
    source "$SCRIPT_DIR/venv/bin/activate" && python calculator-api.py &
    API_PID=$!
    echo $API_PID > "$API_PID_FILE"
    
    # Wait a moment and check if it started successfully
    sleep 2
    if kill -0 $API_PID 2>/dev/null; then
        echo "✅ Secure API server started (PID: $API_PID)"
        echo "🔒 API running on http://localhost:7779"
    else
        echo "❌ Failed to start API server"
        rm -f "$API_PID_FILE"
        return 1
    fi
}

stop_api() {
    echo "🛑 Stopping API server..."
    if [ -f "$API_PID_FILE" ]; then
        PID=$(cat "$API_PID_FILE")
        if kill -0 $PID 2>/dev/null; then
            kill $PID
            rm -f "$API_PID_FILE"
            echo "✅ API server stopped"
        else
            echo "API server not running"
            rm -f "$API_PID_FILE"
        fi
    else
        echo "API server not running"
    fi
}

start_services() {
    echo "🚀 Starting secure NullSector dashboard services..."
    
    # Check if React build is needed
    if [ ! -d "$BUILD_DIR" ] || [ "$REACT_DIR/src" -nt "$BUILD_DIR" ] || [ "$REACT_DIR/package.json" -nt "$BUILD_DIR" ]; then
        echo "🔄 Building React application..."
        cd "$REACT_DIR"
        
        # Install dependencies if needed
        if [ ! -d "node_modules" ]; then
            echo "📦 Installing Node.js dependencies (safe mode)..."
            
            # Install without audit fixes to prevent breaking changes
            npm install --no-audit --no-fund
            
            if [ $? -ne 0 ]; then
                echo "⚠️  Standard install failed, trying with legacy peer deps..."
                npm install --legacy-peer-deps --no-audit --no-fund
                
                if [ $? -ne 0 ]; then
                    echo "❌ npm install failed"
                    return 1
                fi
            fi
        fi
        
        # Build the app
        GENERATE_SOURCEMAP=false npm run build
        
        if [ $? -eq 0 ]; then
            echo "✅ React build completed"
        else
            echo "❌ React build failed"
            return 1
        fi
        
        cd "$SCRIPT_DIR"
    else
        echo "✅ React build is up to date"
    fi
    
    # Start API first
    start_api
    
    # Start Nginx with proper configuration
    if command -v nginx >/dev/null 2>&1; then
        # Update the config with correct path
        sed "s|root /home/ubuntu/Projects/NullSector-sev1-mockup/NullSector-dashboard/build;|root $BUILD_DIR;|g" "$NGINX_CONF" > /tmp/NullSector-dashboard.conf
        
        # Copy our config to sites-available and enable it
        sudo cp /tmp/NullSector-dashboard.conf /etc/nginx/sites-available/NullSector-dashboard
        sudo ln -sf /etc/nginx/sites-available/NullSector-dashboard /etc/nginx/sites-enabled/NullSector-dashboard
        
        # Remove default site if it exists
        sudo rm -f /etc/nginx/sites-enabled/default
        
        # Test configuration
        if sudo nginx -t; then
            if ! pgrep nginx > /dev/null; then
                sudo systemctl start nginx
                echo "✅ Nginx started with secure configuration"
            else
                sudo systemctl reload nginx
                echo "✅ Nginx reloaded with secure configuration"
            fi
            
            # Verify Nginx is listening on port 3025
            sleep 2
            if netstat -tlnp 2>/dev/null | grep -q ":3025.*nginx" || ss -tlnp 2>/dev/null | grep -q ":3025.*nginx"; then
                echo "✅ Nginx confirmed listening on port 3025"
            else
                echo "⚠️  Nginx may not be listening on port 3025"
                echo "🔍 Checking nginx status..."
                sudo systemctl status nginx --no-pager -l
            fi
        else
            echo "❌ Nginx configuration test failed"
            echo "🔍 Nginx config errors:"
            sudo nginx -t
            return 1
        fi
        
        # Clean up temp file
        rm -f /tmp/NullSector-dashboard.conf
    else
        echo "❌ Nginx not found. Please install nginx."
        return 1
    fi
    
    echo ""
    echo "🎉 Secure NullSector Dashboard is now running!"
    echo "🌐 Access: http://localhost:3025"
    echo "🔒 API: http://localhost:7779"
    echo "🛡️  Security: JWT Authentication + Server-side calculations"
    echo ""
    echo "📊 Login with your credentials:"
    echo "   • Youssef / Y0da!777 (Admin Access)"
    echo "   • Maciej / H0th#88! (Admin Access)" 
    echo "   • admin / Vader@66 (Admin Access)"
    echo ""
    echo "🔐 All passwords are now hashed and secure!"
}

stop_services() {
    echo "🛑 Stopping secure dashboard services..."
    
    stop_api
    
    if pgrep nginx > /dev/null; then
        sudo systemctl stop nginx
        echo "✅ Nginx stopped"
    fi
    
    # Remove our site configuration
    sudo rm -f /etc/nginx/sites-enabled/NullSector-dashboard
    
    echo "✅ All services stopped"
}

case "$1" in
    start)
        start_services
        ;;
    stop)
        stop_services
        ;;
    restart)
        stop_services
        sleep 2
        start_services
        ;;
    api-start)
        start_api
        ;;
    api-stop)
        stop_api
        ;;
    status)
        echo "📊 Service Status:"
        if [ -f "$API_PID_FILE" ] && kill -0 $(cat "$API_PID_FILE") 2>/dev/null; then
            echo "🟢 API Server: Running (PID: $(cat $API_PID_FILE))"
        else
            echo "🔴 API Server: Stopped"
        fi
        
        if pgrep nginx > /dev/null; then
            echo "🟢 Nginx: Running"
        else
            echo "🔴 Nginx: Stopped"
        fi
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|api-start|api-stop|status}"
        echo ""
        echo "🔒 Secure NullSector Dashboard Management"
        echo "   start     - Start both API and Nginx"
        echo "   stop      - Stop both services"
        echo "   restart   - Restart both services"
        echo "   api-start - Start only the API server"
        echo "   api-stop  - Stop only the API server"
        echo "   status    - Show service status"
        exit 1
        ;;
esac
